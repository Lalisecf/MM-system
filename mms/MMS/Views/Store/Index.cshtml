@model IEnumerable<MMS.Models.Inventory.StoreVM>

@{
    ViewBag.Title = "Stores";
    Layout = "~/Views/Shared/_BestLayout.cshtml";
}

<div class="card">
    <div class="card-header">
        <h5>
            <button class="btn btn-outline-primary fa fa-store btn-large" data-toggle="modal" data-target="#addStoreModal">
                Add Store
            </button>
        </h5>
    </div>
    <div class="card-body table-border-style">
        <div class="table-responsive">
            <table class="table table-hover" id="example2">
                <thead>
                    <tr>
                        <th>Store Code</th>
                        <th>Store Name</th>
                        <th>Address</th>
                        <th>Account No</th>
                        <th>Branch Code</th>
                        <th>Short Code</th>
                        <th>Stock CC</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var store in Model)
                    {
                        <tr>
                            <td>@store.StoreCode</td>
                            <td>@store.StoreName</td>
                            <td>@store.Address</td>
                            <td>@store.AccountNo</td>
                            <td>@store.BranchCode</td>
                            <td>@store.ShortCode</td>
                            <td>@store.StockCc</td>
                            <td>
                                <button type="button" class="btn btn-outline-primary fa fa-edit" data-toggle="modal" data-target="#editStoreModal" data-id="@store.StoreCode">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Store Modal -->
    <div class="modal fade" id="addStoreModal" tabindex="-1" role="dialog" aria-labelledby="addStoreModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content card-style">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStoreModalLabel">Add Store</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:white">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Form content will be dynamically loaded -->
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Store Modal -->
    <div class="modal fade" id="editStoreModal" tabindex="-1" role="dialog" aria-labelledby="editStoreModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content card-style">
                <div class="modal-header">
                    <h5 class="modal-title" id="editStoreModalLabel">Edit Store</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:white">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Form content will be dynamically loaded -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
document.addEventListener("DOMContentLoaded", function () {
    const addStoreButton = document.querySelector('button[data-target="#addStoreModal"]');
    if (addStoreButton) {
        addStoreButton.addEventListener("click", async function () {
            try {
                const response = await fetch('@Url.Action("Create", "Store")', {
                    method: 'GET',
                });
                if (response.ok) {
                    const modalContent = await response.text();
                    document.querySelector('#addStoreModal .modal-body').innerHTML = modalContent;
                } else {
                    alert('Failed to load the form. Please try again.');
                }
            } catch (error) {
                console.error("Error loading Add Store modal:", error);
                alert('An error occurred while loading the form.');
            }
        });
    }

    const editButtons = document.querySelectorAll('button[data-toggle="modal"][data-target="#editStoreModal"]');
    editButtons.forEach(button => {
        button.addEventListener("click", async function () {
            const storeCode = this.getAttribute('data-id');
            if (!storeCode || storeCode === 'null') {
                alert('Invalid Store Code');
                return;
            }
            try {
                const response = await fetch(`@Url.Action("Edit", "Store")?storeCode=${encodeURIComponent(storeCode)}`, {
                    method: 'GET',
                });
                if (response.ok) {
                    const modalContent = await response.text();
                    document.querySelector('#editStoreModal .modal-body').innerHTML = modalContent;
                } else {
                    alert('Failed to load the form. Please try again.');
                }
            } catch (error) {
                console.error("Error loading Edit Store modal:", error);
                alert('An error occurred while loading the form.');
            }
        });
    });
});
    </script>
}
